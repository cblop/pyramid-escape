{"version":3,"sources":["pyramid_escape/app.cljs"],"mappings":"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","names":["js/pyramid-escape","js/pyramid-escape.app","js/pyramid-escape.app.state","pyramid-escape.app/state","G__48767","threeagent.alpha.core/atom","js/pyramid-escape.app.music","pyramid-escape.app/music","js/module$node_modules$howler$dist$howler.Howl","js/pyramid-escape.app.*canvas-element*","pyramid-escape.app/*canvas-element*","js/pyramid-escape.app.mouse-position","pyramid-escape.app/mouse-position","pyramid_escape.util.threejs.vec2","js/pyramid-escape.app.wall-color","pyramid-escape.app/wall-color","js/pyramid-escape.app.wall-material","pyramid-escape.app/wall-material","pyramid-escape.util.threejs/texture","pyramid-escape.app/stick-duration","pyramid-escape.app/show-info?","reagent.core.atom","pyramid-escape.app/dead?","pyramid-escape.app/restart?","pyramid-escape.app/escaped?","pyramid-escape.app/vec-remove","pos","coll","cljs.core/vec","cljs.core.concat","cljs.core.subvec","pyramid-escape.app/mouse-coords","pyramid-escape.app/door-map","pyramid-escape.app/lamp-map","cljs.core.atom","pyramid-escape.app/stick-map","pyramid-escape.app/placement->index","type","placement","G__48768","cljs.core/Keyword","js/Error","cljs.core._EQ_","pyramid-escape.app/load-room","room","cljs.core/deref","door-string","cljs.core/name","cljs.core.get_in","lamp-string","stick-string","doors","cljs.core.map_indexed","i","v","G__48769","cljs.core.remove","cljs.core/nil?","cljs.core/set","lamps","lit?","unlit?","G__48770","sticks","burns-left","G__48771","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.println","pyramid-escape.app/decrement-burns-left","cljs.core/update","cljs.core.into","p1__48772#","cljs.core.map","G__48773","cljs.core.assoc","cljs.core.update","cljs.core/dec","pyramid-escape.app/die!","js/setTimeout","cljs.core/reset!","pyramid-escape.app/change-room","direction","index","f","cljs.core.nth","cljs.core.update_in","cljs.core/update-in","G__48774","move","cljs.core/inc","cljs.core/empty?","cljs.core.filter","pyramid-escape.app/walls","pyramid-escape.app/door","placements","p__48775","map__48776","cljs.core/--destructure-map","cljs.core.get","pyramid-escape.app/lamp","lamp-placements","light-placements","p__48777","map__48778","pyramid-escape.app/stick","G__48779","p__48780","map__48781","pyramid-escape.app/inventory-item","selected?","G__48782","pyramid-escape.app/mouse-evt->screen-coords","evt","rect","x","y","w","h","pyramid-escape.app/selected-stick-index","s","cljs.core/first","pyramid-escape.app/get-selected-stick","pyramid-escape.app/get-item","p1__48783#","pyramid-escape.app/light-item","items","p1__48784#","G__48785","pyramid-escape.app/light-inv-stick","cljs.core/assoc-in","pyramid-escape.app/change-room-stick","take?","room-kw","chars","cljs.core.apply","cljs.core/str","cljs.core.keyword","update-room","pyramid-escape.app/take-stick","my-sticks","the-stick","p1__48786#","and__4149__auto__","cljs.core/count","p1__48787#","p1__48788#","pyramid-escape.app/light-lamp","stick-index","selected-stick","pyramid-escape.app/on-mouse-down","vec__48792","cljs.core/type","seq__48795","cljs.core/seq","chunk__48796","count__48797","i__48798","temp__5735__auto__","cljs.core/chunked-seq?","c__4591__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","key","cljs.core/keys","seq__48943","chunk__48944","count__48945","i__48946","seq__49015","chunk__49016","count__49017","i__49018","i-key","coords","cljs.core/min","cljs.core/max","cljs.core/second","seq__48981","chunk__48982","count__48983","i__48984","vec__48991","vec__48994","seq__48998","chunk__48999","count__49000","i__49001","vec__49008","vec__49011","seq__49053","chunk__49054","count__49055","i__49056","vec__49063","vec__49066","seq__49070","chunk__49071","count__49072","i__49073","vec__49080","vec__49083","item","cljs.core/vector","p1__48789#","p1__48790#","p1__48791#","clojure.set.union","G__48997","G__49014","G__49069","G__49086","cljs.core.not_EQ_","cljs.core/not","pyramid-escape.app/render-doors","iter__4564__auto__","s__49088","cljs.core/LazySeq","c__4562__auto__","size__4563__auto__","b__49090","cljs.core/chunk-buffer","i__49089","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49087","cljs.core/cons","cljs.core/rest","d","pyramid-escape.app/render-lamps","s__49092","b__49094","i__49093","iter__49091","l","pyramid-escape.app/render-sticks","s__49096","b__49098","i__49097","iter__49095","pyramid-escape.app/render-inventory","s__49100","b__49102","i__49101","vec__49103","iter__49099","vec__49106","pyramid-escape.app/root","pyramid-escape.app/load-scene!","scene-context","threeagent.alpha.core.render","js/document","pyramid-escape.app/ui-root","pyramid-escape.app/init","G__49109","reagent.core.render","pyramid-escape.app/reload"],"sourcesContent":["(ns pyramid-escape.app\n  (:require [pyramid-escape.util.threejs :as threejs]\n            [threeagent.alpha.core :as th]\n            [reagent.core :as r]\n            [\"howler\" :as howler]\n            [\"three\" :as three]))\n\n(defonce state (th/atom {}))\n\n(defonce music (new howler/Howl #js {:src (array \"music/wahmbulance-full.mp3\")\n                                     :loop true}))\n\n(defonce ^:private ^:dynamic *canvas-element* nil)\n\n(defonce ^:private mouse-position (threejs/vec2 [0 0]))\n\n(defonce ^:private wall-color 0xCC9900)\n(defonce ^:private wall-material {:color wall-color\n                                  :normalMap (threejs/texture \"textures/sandstone_blocks_08_nor_2k.jpg\")\n                                  :aoMap (threejs/texture \"textures/sandstone_blocks_08_ao_2k.jpg\")\n                                  ;; :specularMap (threejs/texture \"textures/sandstone_blocks_08_spec_2k.jpg\")\n                                  ;; :roughnessMap (threejs/texture \"textures/sandstone_blocks_08_rough_2k.jpg\")\n                                  :map (threejs/texture \"textures/sandstone_blocks_08_diff_2k.jpg\")})\n\n(def stick-duration 4)\n\n(def show-info? (r/atom true))\n(def dead? (r/atom false))\n(def restart? (r/atom false))\n(def escaped? (r/atom false))\n\n(defn vec-remove\n  \"remove elem in coll\"\n  [pos coll]\n  (vec (concat (subvec coll 0 pos) (subvec coll (inc pos)))))\n\n;; hardcoding these coords because time is running out and I can't get raycasting to work!\n(def mouse-coords\n  {:doors {:left [[-0.99 0] [-0.83 0] [-0.83 -0.75] [-0.99 -0.85]]\n           :middle [[-0.13 0] [0.13 0] [0.13 -0.66] [-0.13 -0.66]]\n           :bottom [[-0.23 -0.94] [0.23 -0.94] [0.23 -1] [-0.23 -1]]\n           :right [[0.83 0] [1 0] [1 -0.85] [0.85 -0.76]]}\n   :lamps {:left [[-0.44 -0.06] [-0.35 -0.06] [-0.39 -0.20] [-0.39 -0.20]]\n           :middle [[-0.04 -0.07] [0.04 -0.07] [0 -0.19] [0 -0.19]]\n           :right [[0.35 -0.07] [0.43 -0.06] [0.39 -0.19] [0.39 -0.19]]}\n   :sticks {:left [[-0.5 -0.73] [-0.41 -0.8] [-0.42 -0.84] [-0.51 -0.76]]\n            :middle [[-0.05 -0.85] [0.05 -0.85] [0.05 -0.89] [-0.05 -0.89]]\n            :right [[0.40 -0.80] [0.51 -0.73] [0.52 -0.77] [0.42 -0.84]]}\n   :inventory {0 [[-0.87 0.57] [-0.73 0.85] [-0.68 0.80] [-0.81 0.53]]\n               1 [[-0.56 0.57] [-0.44 0.86] [-0.39 0.81] [-0.52 0.53]]\n               2 [[-0.26 0.57] [-0.14 0.86] [-0.10 0.81] [-0.21 0.54]]\n               3 [[0.05 0.57] [0.16 0.86] [0.20 0.82] [0.08 0.53]]\n               4 [[0.35 0.56] [0.45 0.85] [0.49 0.83] [0.38 0.53]]\n               5 [[0.64 0.56] [0.74 0.85] [0.79 0.84] [0.70 0.55]]}\n   :floor {:left [[-1 -0.83] [-0.67 -0.65] [-0.28 -0.65] [-0.41 -1]]\n           :middle [[-0.28 -0.65] [0.31 -0.64] [0.43 -1] [-0.41 -1]]\n           :right [[0.29 -0.65] [0.67 -0.65] [1 -0.83] [0.41 -1]]}})\n\n\n; left, middle, bottom, right\n(def door-map\n  [[:--x- :--xx :x-xx :x--x :x-x-]\n   [:-xxx :xxx- :-x-x :x-x- :-xx-]\n   [:-x-x :xxxx :x-x- :-xxx :xx--]\n   [:---- :-x-x :xxxx :xxx- :--x-]\n   [:--x- :---- :-xx- :-xxx :xx--]\n   [:-x-x :x--x :xx-x :xx-x :x---]])\n\n; left, middle, right\n(def lamp-map\n  (atom\n   [[:--- :-l- :--- :--- :---]\n    [:--- :--- :l-- :--- :---]\n    [:--- :--- :--- :l-- :---]\n    [:--- :l-- :--- :--l :---]\n    [:--- :--- :--l :--- :---]\n    [:l-- :--- :--- :--- :-l-]]))\n\n; left, middle, right\n(def stick-map\n  (atom [[:--- :--- :-x- :--- :-x-]\n         [:--- :--- :-xx :--- :--x]\n         [:--- :x-- :--- :-x- :---]\n         [:--- :--- :--- :-x- :---]\n         [:x-- :--- :x-x :--- :--x]\n         [:--x :--- :-x- :--- :---]]))\n\n(defn- placement->index\n  [type placement]\n  (case placement\n    :left 0\n    :middle 1\n    :bottom 2\n    :right (if (= type :door) 3 2)))\n\n(defn load-room\n  []\n  (let [room (:room @state)\n        door-string (name (get-in door-map room))\n        lamp-string (name (get-in @lamp-map room))\n        stick-string (name (get-in @stick-map room))\n        doors (->> door-string\n                   (map-indexed (fn [i v]\n                                  (when (= v \\x)\n                                    (case i\n                                      0 :left\n                                      1 :middle\n                                      2 :bottom\n                                      3 :right))))\n                   (remove nil?)\n                   (set))\n        lamps (->> lamp-string\n                   (map-indexed (fn [i v]\n                                  (let [lit? (= v \\l)\n                                        unlit? (= v \\x)]\n                                    (when (or lit? unlit?)\n                                      {:placement (case i\n                                                    0 :left\n                                                    1 :middle\n                                                    2 :right)\n                                       :lit? lit?}))))\n                   (remove nil?)\n                   (set))\n        sticks (->> stick-string\n                    (map-indexed (fn [i v]\n                                   (let [lit? (> (int v) 0)\n                                         burns-left (int v)\n                                         unlit? (= v \\x)]\n                                     (when (or lit? unlit?)\n                                       {:placement (case i\n                                                     0 :left\n                                                     1 :middle\n                                                     2 :right)\n                                        :lit? lit?\n                                        :burns-left burns-left}))))\n                    (remove nil?)\n                    (set))]\n    (swap! state assoc :doors doors :lamps lamps :sticks sticks)\n    (println @state)))\n\n(defn decrement-burns-left\n  []\n  (swap! state update :inventory (fn [sticks]\n                                   (into []\n                                         (map #(cond-> %\n                                                 (= 1 (:burns-left %))\n                                                 (assoc :lit? false)\n                                                 (> (:burns-left %) 0)\n                                                 (update :burns-left dec)) sticks)))))\n\n(defn- die!\n  []\n  (js/setTimeout (fn []\n                   (reset! dead? true)\n                   (.fade music 1 0 2500)) 1000)\n  (js/setTimeout (fn []\n                   (reset! restart? true)) 2500))\n\n(defn change-room\n  [direction]\n  (letfn [(move [index f]\n            (when (and\n                   (= \"x\" (nth (vec (name (get-in door-map (:room @state)))) (placement->index :door direction)))\n                   (get-in door-map (:room (update-in @state [:room index] f))))\n              (swap! state update-in [:room index] f)\n              (decrement-burns-left)\n              (load-room)))]\n    (case direction\n      :left (move 1 dec)\n      :middle (move 0 dec)\n      :bottom (move 0 inc)\n      :right (move 1 inc)))\n  (if (= (:room @state) [0 0]) (reset! escaped? true)\n      (when (empty? (filter :lit? (concat (:inventory @state) (:sticks @state) (:lamps @state))))\n        (die!))))\n\n(defn walls []\n  [:object {:position [0 0 -10]\n            :scale [1.0 1.0 1]}\n   ;; left wall\n   [:plane {:position [-15 0 -10]\n            :rotation [0 1 0]\n            :scale [30 20 10]\n            :material wall-material}]\n   ;; right wall\n   [:plane {:position [15 0 -10]\n            :rotation [0 -1 0]\n            :scale [30 20 10]\n            :material wall-material}]\n   ;; back wall\n   [:plane {:position [0 0 -10]\n            :scale [30 20 10]\n            :material wall-material}]\n   ;; ceiling\n   [:plane {:position [0 10 -10]\n            :rotation [1 0 0]\n            :scale [50 20 10]\n            :material wall-material}]\n   ;; floor\n   [:plane {:position [0 -10 -10]\n            :rotation [-1 0 0]\n            :scale [50 20 10]\n            :material wall-material}]])\n\n(defn door\n  [placement]\n  (let [placements {:left {:position [-22 -5 -9]\n                           :rotation [0 1 0]\n                           :scale [3 10 11]}\n                    :middle {:position [0 -5 -11.4]\n                             :rotation [0 0 0]\n                             :scale [6 11 3]}\n                    :bottom {:position [0 -15 -1.4]\n                             :rotation [0 0 0]\n                             :scale [6 11 3]}\n                    :right {:position [22 -5 -9]\n                            :rotation [0 -1 0]\n                            :scale [3 10 11]}}]\n    [:object {:position [0 0 -10]\n              :scale [1.0 1.0 1]}\n     [:box {:position (get-in placements [placement :position])\n            :rotation (get-in placements [placement :rotation])\n            :scale (get-in placements [placement :scale])\n            :material {:color \"black\"\n                       :specular 0}}]]))\n\n(defn lamp\n  [{:keys [placement lit?]}]\n  (let [lamp-placements {:left {:position [-9 -2 -10]\n                                :rotation [3 0 0]}\n                         :middle {:position [0 -2 -10]\n                                  :rotation [3 0 0]}\n                         :right {:position [9 -2 -10]\n                                 :rotation [3 0 0]}}\n        light-placements {:left [-13 0 -1]\n                          :middle [0 0 -1]\n                          :right [13 0 -1]}]\n    [:group\n     [:object {:position [0 0 -10]\n               :scale [1.0 1.0 1]}\n      [:cone {:position (get-in lamp-placements [placement :position])\n              :rotation (get-in lamp-placements [placement :rotation])\n              :scale [0.2 0.2 0.2]\n              :radius 5\n              :height 10\n              :material {:color (if lit? \"yellow\"\n                                    \"brown\")}}]]\n     (when lit?\n       [:point-light {:intensity 1\n                      :position (get light-placements placement)}])]))\n\n(defn stick\n  [{:keys [placement lit? burns-left]}]\n  (let [placements {:left {:position [-8 -9 -5]\n                           :rotation [2 0 2]}\n                    :middle {:position [0 -10 -5]\n                             :rotation [1 0 1]}\n                    :right {:position [8 -9 -5]\n                            :rotation [0 0 2]}}]\n\n    [:object {:position [0 0 -10]\n              :scale [1.0 1.0 1]}\n     (when lit?\n       [:point-light {:intensity 1\n                      :distance 50\n                      :position (assoc (get-in placements [placement :position]) 2 10)}])\n     [:cylinder {:radius-top 1\n                 :radius-bottom 1\n                 :height 10\n                 :position (get-in placements [placement :position])\n                 :rotation (get-in placements [placement :rotation])\n                 :open-ended? false\n                 :scale [0.2 0.2 0.2]\n                 :material {:color (if lit?\n                                     (case burns-left\n                                       4 0xffff80\n                                       3 \"yellow\"\n                                       2 \"orange\"\n                                       1 \"red\"\n                                       \"brown\")\n                                       \"brown\")}}]]))\n\n(defn inventory-item\n  [index {:keys [lit? selected? burns-left]}]\n  (let [placements [[-13 8 -5] [-8 8 -5] [-3 8 -5] [2 8 -5] [7 8 -5] [12 8 -5]]]\n    [:object {:position [0 0 -10]\n              :scale [1.0 1.0 1]}\n     [:cylinder {:radius-top 1\n                 :radius-bottom 1\n                 :height 10\n                 :position (nth placements index)\n                 :rotation [3.0 0 0.5]\n                 :open-ended? false\n                 :scale [0.4 0.4 0.4]\n                 :material {:color (cond\n                                     selected? \"green\"\n                                     lit? (case burns-left\n                                            4 0xffff80\n                                            3 \"yellow\"\n                                            2 \"orange\"\n                                            1 \"red\"\n                                            \"brown\")\n                                     :else \"brown\")}}]\n     (when lit?\n       [:point-light {:intensity (/ burns-left 2)\n                      :distance 50\n                      :position (assoc (nth placements index) 2 10)}])\n     ]))\n\n(defn- mouse-evt->screen-coords [evt]\n  (let [rect (.getBoundingClientRect *canvas-element*)\n        x (- (.-clientX evt) (.-left rect))\n        y (- (.-clientY evt) (.-top rect))\n        w (.-width rect)\n        h (.-height rect)]\n    [(- (* 2 (/ x w)) 1)\n     (+ 1 (* 2 (- (/ y h))))]))\n\n(defn- selected-stick-index\n  []\n  (->> (map-indexed (fn [i s]\n                     (when (:selected? s)\n                       i)) (:inventory @state))\n       (remove nil?)\n       (first)))\n\n(defn- get-selected-stick\n  []\n  (get-in @state [:inventory (selected-stick-index)]))\n\n(defn- get-item\n  [type placement]\n  (->> (get @state type)\n       (filter #(= (:placement %) placement))\n       (first)))\n\n(defn- light-item\n  [type placement]\n  (swap! state update type (fn [items]\n                               (map #(cond-> %\n                                       (= placement (:placement %)) (assoc :lit? true))\n                                    items))))\n\n(defn- light-inv-stick\n  [index]\n  (swap! state assoc-in [:inventory index :burns-left] stick-duration)\n  (swap! state assoc-in [:inventory index :selected?] false)\n  (swap! state assoc-in [:inventory index :lit?] true))\n\n(defn- change-room-stick\n  [placement take?]\n  (println \"THIS STICK\" (get-selected-stick))\n  (println (str (:burns-left (get-selected-stick))))\n  (letfn [(update-room [room-kw]\n            (let [chars (vec (name room-kw))]\n              (->>\n               (assoc-in chars [(placement->index :stick placement)] (if take? \"-\" (str (:burns-left (get-selected-stick)))))\n               (apply str)\n               (keyword))))]\n    (swap! stick-map update-in (:room @state) update-room)))\n\n(defn- take-stick\n  [placement]\n  (let [my-sticks (:inventory @state)\n        the-stick (first (filter #(= (:placement %) placement) (:sticks @state)))]\n    (when (and the-stick (< (count my-sticks) 7))\n      (swap! state update :sticks (fn [sticks] (remove #(= (:placement %) placement) sticks)))\n      (swap! state update :inventory #(concat % [{:selected? false :lit? (:lit? the-stick) :burns-left (:burns-left the-stick)}]))\n      (change-room-stick placement true))))\n\n(defn- light-lamp\n  [placement]\n  (let [stick-index (selected-stick-index)\n        selected-stick (nth (:inventory @state) stick-index)]\n    (cond\n      ;; (:lit? selected-stick) (do (light-item :lamps placement)\n      ;;                            (swap! state assoc-in [:inventory stick-index :selected?] false))\n      (:lit? (get-item :lamps placement)) (light-inv-stick stick-index))))\n\n(defn- on-mouse-down [evt]\n  (let [[x y] (mouse-evt->screen-coords evt)]\n    (set! (.-x mouse-position) x)\n    (set! (.-y mouse-position) y)\n    (println \"x:\" (.toFixed x 2))\n    (println \"y:\" (.toFixed y 2))\n    (println (type (:inventory @state)) (:inventory @state))\n    (doseq [key (keys mouse-coords)]\n      (doseq [i-key (keys (get mouse-coords key))]\n        (let [coords (get-in mouse-coords [key i-key])]\n          (when (and (> x (apply min (map first coords)))\n                     (< x (apply max (map first coords)))\n                     (> y (apply min (map second coords)))\n                     (< y (apply max (map second coords))))\n            (cond\n              (= key :doors) (change-room i-key)\n              (= key :floor) (doseq [[i item] (map-indexed vector (:inventory @state))]\n                               (when (and (:selected? item) (empty? (filter #(= (:placement %) i-key) (:sticks @state))))\n                                 (change-room-stick i-key false)\n                                 (swap! state update :inventory #(vec-remove i (into [] %)))\n                                 (swap! state update :sticks #(clojure.set/union % #{{:placement i-key :lit? (:lit? item) :burns-left (:burns-left item)}}))\n                                 ))\n              (= key :sticks) (take-stick i-key)\n              (= key :inventory) (swap! state update :inventory (fn [items]\n                                                                  (into []\n                                                                   (map-indexed (fn [i item]\n                                                                                  (cond-> item\n                                                                                    (not= i-key i) (assoc :selected? false)\n                                                                                    (= i-key i) (update :selected? not)))\n                                                                                items))))\n              (= key :lamps) (light-lamp i-key))\n            (println key i-key)))))))\n\n(defn- render-doors []\n  (for [d (:doors @state)]\n    [door d]))\n\n(defn- render-lamps []\n  (for [l (:lamps @state)]\n    [lamp l]))\n\n(defn- render-sticks []\n  (for [s (:sticks @state)]\n    [stick s]))\n\n(defn- render-inventory []\n  (for [[index item] (map-indexed vector (:inventory @state))]\n    [inventory-item index item]))\n\n(defn root []\n  [:object\n   [walls]\n   (render-doors)\n   (render-lamps)\n   (render-sticks)\n   (render-inventory)])\n\n\n(defn load-scene! []\n  (let [scene-context (th/render [root]\n                                 (.getElementById js/document \"root\"))]\n    (swap! state assoc\n           :room [5 0]\n           :inventory [])\n    (load-room)\n    (swap! state assoc :scene-context scene-context)\n    (swap! state assoc :camera (.-camera ^js scene-context))))\n\n(declare init)\n\n(defn- ui-root []\n  [:div\n   (when @escaped?\n     [:div\n      [:img {:src \"img/desert.png\"}]\n      [:div#message\n       [:p \"Congratulations, you have escaped!\"]]])\n   (when @show-info?\n     [:div#explanation {:on-click #(reset! show-info? false)}\n      [:p \"You find yourself underneath an ancient Egyptian pyramid.\"]\n      [:p \"Using the glowing rods, find your way out through the labyrinth.\"]\n      [:p \"Recharge them using the lamps, and leave them on the floor when needed.\"]\n      [:p \"Good luck!\"]])\n   (when @dead?\n     [:div#message\n      [:p \"You have died\"]\n      (when @restart?\n        [:a {:href \"\"\n             :on-click init} \"Click here to restart\"])])])\n\n(defn init []\n  (set! *canvas-element* (.getElementById js/document \"root\"))\n  ;; (set! (.-width *canvas-element*) (* (.-height *canvas-element*) 1.6))\n  (th/render [root] (.getElementById js/document \"root\"))\n  (doto (.getElementById js/document \"root\")\n    (.addEventListener \"mousedown\" on-mouse-down false))\n  (r/render [ui-root]\n            (.getElementById js/document \"ui-root\"))\n  (.play music)\n  (reset! state {})\n  (reset! show-info? true)\n  (reset! dead? false)\n  (reset! restart? false)\n  (reset! escaped? false)\n  (load-scene!))\n\n\n(defn ^:dev/after-load reload []\n  (th/render [root]\n             (.getElementById js/document \"root\"))\n  (r/render [ui-root]\n            (.getElementById js/document \"ui-root\")))\n\n"]}