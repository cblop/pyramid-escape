{"version":3,"sources":["threeagent/impl/component.cljs"],"mappings":"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","names":["threeagent.impl.component/render-component","key","config","renderer","cljs.core.get","threeagent.alpha.component/*registry*","cljs.core.println","threeagent.impl.component/->material","js/module$node_modules$three$build$three.Material","threeagent.impl.threejs/mesh-phong-material","threeagent.impl.component/to-mesh","geo","material-config","mat","threeagent.impl.threejs/mesh","threeagent.alpha.component/register-component-renderer!","c","threeagent.impl.threejs/object","threeagent.impl.threejs/group","p__26152","map__26153","cljs.core/--destructure-map","fov","aspectRatio","near","far","threeagent.impl.threejs/perspective-camera","p__26154","map__26155","object","p__26156","map__26157","width","height","width-segments","height-segments","material","js/module$node_modules$three$build$three.PlaneGeometry","p__26158","map__26159","depth","depth-segments","js/module$node_modules$three$build$three.BoxGeometry","p__26160","map__26161","radius","phi-start","phi-length","theta-start","theta-length","threeagent.impl.util/pi-times-2","threeagent.impl.util/pi","js/module$node_modules$three$build$three.SphereGeometry","p__26162","map__26163","radius-top","radius-bottom","radial-segments","open-ended?","js/module$node_modules$three$build$three.CylinderGeometry","p__26164","map__26165","segments","js/module$node_modules$three$build$three.CircleGeometry","p__26166","map__26167","js/module$node_modules$three$build$three.ConeGeometry","p__26168","map__26169","detail","js/module$node_modules$three$build$three.DodecahedronGeometry","p__26170","map__26171","js/module$node_modules$three$build$three.IcosahedronGeometry","p__26172","map__26173","js/module$node_modules$three$build$three.OctahedronGeometry","p__26174","map__26175","inner-radius","outer-radius","theta-segments","phi-segments","js/module$node_modules$three$build$three.RingGeometry","p__26176","map__26177","js/module$node_modules$three$build$three.TetrahedronGeometry","p__26178","map__26179","tube","tubular-segments","arc","js/module$node_modules$three$build$three.TorusGeometry","p__26180","map__26181","p","q","js/module$node_modules$three$build$three.TorusKnotGeometry","p__26182","map__26183","shape","js/module$node_modules$three$build$three.ShapeGeometry","p__26184","map__26185","color","intensity","js/module$node_modules$three$build$three.AmbientLight","p__26186","map__26187","distance","decay","js/module$node_modules$three$build$three.PointLight","p__26188","map__26189","sky-color","ground-color","js/module$node_modules$three$build$three.HemisphereLight","p__26190","map__26191","js/module$node_modules$three$build$three.DirectionalLight","p__26192","map__26193","js/module$node_modules$three$build$three.RectAreaLight","p__26194","map__26195","angle","penumbra","threeagent.impl.util/pi-over-2","js/module$node_modules$three$build$three.SpotLight","p__26196","map__26197","text","cfg","threeagent.impl.threejs/text-geometry"],"sourcesContent":["(ns threeagent.impl.component\n  (:require [threeagent.impl.threejs :as threejs]\n            [threeagent.alpha.component :as component]\n            [threeagent.impl.util :refer [pi-times-2 pi pi-over-2]]\n            [\"three\" :as three])\n  (:require-macros [threeagent.alpha.macros :refer [defcomponent]]))\n\n(defn render-component [key config]\n  (let [renderer (get component/*registry* key)]\n    (if renderer\n      (renderer config)\n      (println \"Missing renderer for object type\" key))))\n\n(defn- ->material [config]\n  (if (instance? three/Material config)\n    config\n    (threejs/mesh-phong-material config)))\n\n(defn- to-mesh [geo material-config]\n  (let [mat (->material material-config)]\n    (threejs/mesh geo mat)))\n\n;; Basic\n(defcomponent :object [c] (threejs/object))\n(defcomponent :group [c] (threejs/group))\n(defcomponent :camera [{:keys [fov aspectRatio near far]}]\n  (threejs/perspective-camera fov aspectRatio near far))\n(defcomponent :instance [{:keys [object]}] object)\n\n;; Primitives\n(defcomponent :plane [{:keys [width height\n                              width-segments height-segments\n                              material]}]\n  (let [geo (three/PlaneGeometry. width height width-segments height-segments)]\n    (to-mesh geo material)))\n\n(defcomponent :box [{:keys [width height depth width-segments\n                            height-segments depth-segments\n                            material]\n                     :or {width 1.0\n                          height 1.0\n                          depth 1.0\n                          width-segments 1\n                          height-segments 1\n                          depth-segments 1}}]\n  (let [geo (three/BoxGeometry. width height depth\n                                width-segments height-segments depth-segments)]\n    (to-mesh geo material)))\n    \n(defcomponent :sphere [{:keys [radius width-segments height-segments\n                               phi-start phi-length theta-start theta-length\n                               material]\n                        :or {radius 1.0\n                             width-segments 8\n                             height-segments 6\n                             phi-start 0\n                             phi-length pi-times-2\n                             theta-start 0\n                             theta-length pi}}]\n  (let [geo (three/SphereGeometry. radius\n                                   width-segments\n                                   height-segments\n                                   phi-start\n                                   phi-length\n                                   theta-start\n                                   theta-length)]\n    (to-mesh geo material)))\n\n(defcomponent :cylinder [{:keys [radius-top radius-bottom height radial-segments\n                                 height-segments open-ended? theta-start theta-length\n                                 material]\n                          :or {radius-top 1.0\n                               radius-bottom 1.0\n                               height 1.0\n                               radial-segments 8\n                               height-segments 1\n                               theta-start 0\n                               theta-length pi-times-2}}]\n  (let [geo (three/CylinderGeometry. radius-top \n                                     radius-bottom \n                                     height \n                                     radial-segments\n                                     height-segments\n                                     open-ended?\n                                     theta-start\n                                     theta-length)]\n    (to-mesh geo material)))\n\n(defcomponent :circle [{:keys [radius segments theta-start theta-length material]\n                        :or {radius 1.0\n                             segments 8\n                             theta-start 0\n                             theta-length pi-times-2}}]\n  (let [geo (three/CircleGeometry. radius\n                                   segments\n                                   theta-start\n                                   theta-length)]\n    (to-mesh geo material)))\n\n(defcomponent :cone [{:keys [radius height radial-segments height-segments\n                             open-ended? theta-start theta-length material]\n                      :or {radius 1.0\n                           height 1.0\n                           radial-segments 8\n                           height-segments 1\n                           theta-start 0\n                           theta-length pi-times-2}}]\n  (let [geo (three/ConeGeometry. radius height\n                                 radial-segments height-segments\n                                 open-ended?\n                                 theta-start theta-length)]\n    (to-mesh geo material)))\n\n(defcomponent :dodecahedron [{:keys [radius detail material]\n                              :or {radius 1.0\n                                   detail 0}}]\n  (let [geo (three/DodecahedronGeometry. radius detail)]\n    (to-mesh geo material)))\n\n(defcomponent :icosahedron [{:keys [radius detail material]\n                             :or {radius 1.0\n                                  detail 0}}]\n  (let [geo (three/IcosahedronGeometry. radius detail)]\n    (to-mesh geo material)))\n\n(defcomponent :octahedron [{:keys [radius detail material]\n                            :or {radius 1.0\n                                 detail 0}}]\n  (let [geo (three/OctahedronGeometry. radius detail)]\n    (to-mesh geo material)))\n\n(defcomponent :ring [{:keys [inner-radius outer-radius\n                             theta-segments phi-segments\n                             theta-start theta-length\n                             material]\n                      :or {inner-radius 0.5\n                           outer-radius 1.0\n                           theta-segments 8\n                           phi-segments 8\n                           theta-start 0\n                           theta-length pi-times-2}}]\n                           \n  (let [geo (three/RingGeometry. inner-radius outer-radius\n                                 theta-segments phi-segments\n                                 theta-start theta-length)]\n    (to-mesh geo material)))\n\n(defcomponent :tetrahedron [{:keys [radius detail material]\n                             :or {radius 1.0\n                                  detail 0}}]\n  (let [geo (three/TetrahedronGeometry. radius detail)]\n    (to-mesh geo material)))\n\n(defcomponent :torus [{:keys [radius tube radial-segments tubular-segments arc\n                              material]\n                       :or {radius 1.0\n                            tube 0.4\n                            radial-segments 8\n                            tubular-segments 6\n                            arc pi-times-2}}]\n  (let [geo (three/TorusGeometry. radius tube radial-segments tubular-segments arc)]\n    (to-mesh geo material)))\n\n(defcomponent :torus-knot [{:keys [radius tube tubular-segments radial-segments p q\n                                   material]\n                            :or {radius 1.0\n                                 tube 0.4\n                                 tubular-segments 64\n                                 radial-segments 8\n                                 p 2\n                                 q 3}}]\n  (let [geo (three/TorusKnotGeometry. radius tube tubular-segments radial-segments p q)]\n    (to-mesh geo material)))\n\n(defcomponent :shape [{:keys [shape material]}]\n  (let [geo (three/ShapeGeometry. shape)]\n    (to-mesh geo material)))\n\n\n;; Lights\n(defcomponent :ambient-light [{:keys [color intensity]\n                               :or {color 0xFFFFFF\n                                    intensity 1.0}}]\n  (three/AmbientLight. color intensity))\n\n(defcomponent :point-light [{:keys [color intensity distance decay]\n                             :or {color 0xFFFFFF\n                                  intensity 1.0\n                                  distance 0\n                                  decay 1.0}}]\n  (three/PointLight. color intensity distance decay))\n\n(defcomponent :hemisphere-light [{:keys [sky-color ground-color intensity]\n                                  :or {sky-color 0xFFFFFF\n                                       ground-color 0xFFFFFF\n                                       intensity 1}}]\n  (three/HemisphereLight. sky-color ground-color intensity))\n\n(defcomponent :directional-light [{:keys [color intensity]\n                                   :or {color 0xFFFFFF\n                                        intensity 1.0}}]\n  (three/DirectionalLight. color intensity))\n\n(defcomponent :rect-area-light [{:keys [color intensity width height]\n                                 :or {color 0xFFFFFF\n                                      intensity 1.0\n                                      width 10.0\n                                      height 10.0}}]\n  (three/RectAreaLight. color intensity width height))\n\n(defcomponent :spot-light [{:keys [color intensity distance angle penumbra decay]\n                            :or {color 0xFFFFFF\n                                 intensity 1.0\n                                 distance 0\n                                 angle pi-over-2\n                                 penumbra 0.0\n                                 decay 1.0}}]\n  (three/SpotLight. color intensity distance angle penumbra decay))\n\n\n;; Text\n(defcomponent :text [{:keys [text material] :as cfg}]\n  (let [geo (threejs/text-geometry text cfg)]\n    (to-mesh geo material)))\n\n"]}