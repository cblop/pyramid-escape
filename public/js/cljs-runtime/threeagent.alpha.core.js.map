{"version":3,"sources":["threeagent/alpha/core.cljs"],"mappings":";AAKA,AAAKA,AAAKC;AACV,AAAKC,AAAOC;AACZ,AAAKC,AAAMC;AAEX,AAAA,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE,AAAQC;AADZ,AACsB,AAAA,AAACC,AAAOF,AAAQC;;;AADtC,AAAA,AAAA,AAAMH,AAEFE,AAAQC,AAASE;AAFrB,AAE2B,AAACC,AAAaJ,AAAQC,AAASE;;;AAF1D,AAAA,AAAA,AAAML;;AAAN","names":["threeagent.alpha.core/atom","reagent.ratom/atom","threeagent.alpha.core/cursor","reagent.ratom/cursor","threeagent.alpha.core/track","reagent.ratom/track","var_args","G__26221","threeagent.alpha.core/render","js/Error","root-fn","dom-root","threeagent.alpha.core.render","opts","threeagent.impl.scene/render"],"sourcesContent":["(ns threeagent.alpha.core\n  (:refer-clojure :exclude [atom])\n  (:require [threeagent.impl.scene :as scene]\n            [reagent.ratom :as ratom]))\n\n(def atom ratom/atom)\n(def cursor ratom/cursor)\n(def track ratom/track)\n\n(defn render\n  ([root-fn dom-root] (render root-fn dom-root {}))\n  ([root-fn dom-root opts] (scene/render root-fn dom-root opts)))\n\n"]}