{"version":3,"sources":["threeagent/impl/scene.cljs"],"mappings":";;AAQA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAmBC,AAAS;;AAE5B,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA;AAAA,AAAA,AAAA,AAASK;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI,AAAuBC,AACIC,AACTC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC;AAT3B,AAAA,AAAAX,AAAgCE,AACIC,AACTC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC,AACAC;;;AATlBX,AAYT,AAAA,AAAOY,AAAeC;AAAtB,AACE,AAAMC,AAAY,AAAA,AAAmBD;AAC/BE,AAAI,AAACC,AAAiB,AAAA,AAAgBH,AAAWC;AADvD,AAEE,AAACG,AAAsBF,AAAI,AAAA,AAAWF;;AACtC,AAACK,AAAsBH,AAAI,AAAA,AAAWF;;AACtC,AAACM,AAAmBJ,AAAI,AAAA,AAAQF;;AAChCE;;AAEJ,AAAA,AAAOK,AAA0BC,AAAqBC,AAAKT,AAAUE;AAArE,AACE,AAAM,AAAWO,AAAMP;;AACvB,AAAM,AAAA,AAACQ,AAAU,AAAA,AAAgBV;AAAjC,AACE,AAAM,AAAUQ,AAASN;;AAD3B;;;AAGF,AAAA,AAAOS,AAAmBH,AAAQI,AAA2BH;AAA7D,AACE,AAAA,AACE,AAAMT,AAAU,AAAQS;AAClBR,AAAY,AAAA,AAAmBD;AAC/BE,AAAI,AAACH,AAAcC;AAFzB,AAGE,AAACO,AAAgBC,AAAQC,AAAKT,AAAUE;;AACxC,AAAMU,AAAcV;;AACpB,AAAiBO,AAAK,AAACK,AAAQH,AAASH,AAAQN;;AAChD,AAAA,AAAA,AAAgBA;;AAChB,AAAAa,AAAoB,AAAA,AAAW,AAAQN;AAAvC,AAAA,AAAAM;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACA,AAAAA,AAAAA,AAASd,AAAAA;;AADZ;;AAEAA;AAVJ,AAAAW,AAWkBI;AAXlB,AAYI,AAAA,AAACC;;AACD,AAACA,AAAID;;AACL,AAACE,AAAQV;;AAEf,AAAA,AAAOW,AAA2BX;AAAlC,AACE,AAAMP,AAAI,AAAWO;AACfY,AAAW,AAAe,AAAUZ;AAD1C,AAEE,AAAA,AAAA,AAAgBP;;AAChB,AAAAa,AAAoB,AAAA,AAAa,AAAQN;AAAzC,AAAA,AAAAM;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACA,AAAAA,AAAAA,AAASd,AAAAA;;AADZ;;AAEA,AAASmB,AAAWnB;;AACpB,AAAiBO,AAAKW;;AAE1B,AAAA,AAAOE,AAAqBd,AAAQe,AAAcC;AAAlD,AACE,AAACb,AAASH,AAAQgB,AAAW,AAAQD;;AAEvC,AAAA,AAAME,AAAWC,AAAEC;AAAnB,AACE,AAAMC,AAAK,AAAA,AAAA,AAAA,AAAM,AAAI,AAACC,AAAK,AAAA,AAAmBH,AAAG,AAAA,AAAmBC,AAC/C,AAACE,AAAK,AAAA,AAAgBH,AAAG,AAAA,AAAgBC,AAChDD,AAAEC;AACVG,AAAS,AAAA,AAAA,AAAM,AAACD,AAAK,AAAA,AAAWH,AAAG,AAAA,AAAWC,AAAI,AAAA,AAAWA;AAC7DI,AAAS,AAAA,AAAA,AAAM,AAACF,AAAK,AAAA,AAAWH,AAAG,AAAA,AAAWC,AAAI,AAAA,AAAWA;AAC7DK,AAAM,AAAA,AAAA,AAAM,AAACH,AAAK,AAAA,AAAQH,AAAG,AAAA,AAAQC,AAAI,AAAA,AAAQA;AALvD,AAAA,AAAA,AAAA,AAAA,AAAA,AAMSC,AACCI,AACGF,AACAC;;AAEf,AAAA,AAAOE,AAAuBzB,AAAQC,AAAKyB,AAASC;AAApD,AACE,AAAMC,AAAK,AAACX,AAAUS,AAASC;AACzBE,AAAQ,AAAe5B;AACvB6B,AAAS,AAAQ7B;AACjBmB,AAAK,AAAA,AAAOQ;AAHlB,AAIE,AAAIR;AAEF,AAAA,AACE,AAAAY,AAAYZ;AAAZ,AAAAa,AAAAD,AAAA,AAAA,AAAOd;AAAP,AAAAe,AAAAD,AAAA,AAAA,AAASb;AACHN,AAAW,AAAUgB;AACrBK,AAAS,AAAYL;AACrBM,AAAQ,AAAC5C,AAAcoC;AAH7B,AAIE,AAAA,AAAA,AAAgBE;;AAChB,AAAAtB,AAAoB,AAAA,AAAauB;AAAjC,AAAA,AAAAvB;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACA,AAAAA,AAAAA,AAASqB,AAAAA;;AADZ;;AAEA,AAAC9B,AAAgBC,AAAQC,AAAK0B,AAASQ;;AACvC,AAAStB,AAAWgB;;AACpB,AAAMhB,AAAWsB;;AACjB,AAAU,AAAYlC;AAAtB;AAAA,AACE,AAAAmC,AAAA,AAAAC,AAAcH;AAAdI,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQQ;AAAR,AAAA,AACE,AAAMb,AAAQa;;AADhB;AAAA,AAAAZ;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAjC,AAAA,AAAA8B,AAAAD;AAAA,AAAA,AAAA7B;AAAA,AAAA,AAAA6B,AAAA7B;AAAA,AAAA,AAAA,AAAAkC,AAAAL;AAAA,AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAAM;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAV,AAAQY;AAAR,AAAA,AACE,AAAMb,AAAQa;;AADhB;AAAA,AAAA,AAAAD,AAAAX;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAEF,AAAA,AAAA,AAAgBD;;AAChB,AAAA5B,AAAoB,AAAA,AAAWuB;AAA/B,AAAA,AAAAvB;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAACA,AAAAA,AAAAA,AAAS2B,AAAAA;;AADZ;;AAfJ,AAAAJ,AAiBkBkB;AAjBlB,AAkBI,AAAA,AAACvC;;AACD,AAACA,AAAIuC;;AACL,AAACvC,AAAIT;;AAET,AACE,AAAM,AAAA,AAAW2B;AAAjB,AAAuB,AAAChC,AAAsBiC,AAAQ,AAAA,AAAWD;;AAAjE;;AACA,AAAM,AAAA,AAAWA;AAAjB,AAAuB,AAAC/B,AAAsBgC,AAAQ,AAAA,AAAWD;;AAAjE;;AACA,AAAM,AAAA,AAAQA;AAAd,AAAoB,AAAC9B,AAAmB+B,AAAQ,AAAA,AAAQD;;AAAxD;;;;AAER,AAAA,AAAAsB,AAAOE,AAAwBpD;AAA/B,AAAA,AAAAmD,AAAAD;AAAA,AAAAjB,AAAAkB,AAAA,AAAA,AAAqDlD;AAArD,AAAAgC,AAAAkB,AAAA,AAAA,AAA0DE;AAA1D,AAAApB,AAAAkB,AAAA,AAAA,AAAiEG;AAAjE,AAAArB,AAAAkB,AAAA,AAAA,AAAqEI;AAArE,AACE,AACE,AAAA,AAACrD,AAAOmD;AACR,AAAClD,AAASH,AAAQ,AAAe,AAAUC,AAAOA;;AAFpD,AAIE,AAAA,AAACC,AAAUmD;AACX,AAACzC,AAAaX;;AALhB,AAOE,AAAA,AAACC,AAAUmD;AACX,AAAC5B,AAAazB,AAAQC,AAAKqD,AAAIC;;AARjC;;;;;AAUF,AAAA,AAAOC,AAAuCxD,AAAQyD;AAAtD,AACE,AAAAC,AAAA,AAAArB,AAAeoB;AAAfE,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQC;AAAR,AAAA,AACE,AAACV,AAAcpD,AAAQ8D;;AADzB;AAAA,AAAAJ;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAtD,AAAA,AAAA8B,AAAAqB;AAAA,AAAA,AAAAnD;AAAA,AAAA,AAAAmD,AAAAnD;AAAA,AAAA,AAAA,AAAAkC,AAAAiB;AAAA,AAAAhB,AAAA,AAAAC,AAAAe;AAAA,AAAA,AAAA,AAAAd,AAAAc;AAAAhB;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAI,AAAAY,AAAQI;AAAR,AAAA,AACE,AAACV,AAAcpD,AAAQ8D;;AADzB;AAAA,AAAA,AAAAf,AAAAW;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAGF,AAAA,AAAOK,AAAkB/D;AAAzB,AACE,AAAMgE,AAAM,AAAShE;AACfb,AAAM,AAASa;AACfe,AAAc,AAA8Bf;AAC5CZ,AAAS,AAAYY;AACrBiE,AAAS,AAAYjE;AACrBd,AAAO,AAAUc;AACjBgB,AAAW,AAAahB;AACxBkE,AAAiB,AAAkBlE;AACnCmE,AAAgB,AAAiBnE;AARvC,AAUE,AAAMgE;AAAN,AACE,AAAQA;;AADV;;AAEA,AAAMI,AAAW,AAAWjF;AACtBsE,AAAU;AADhB,AAGE,AAAMS;AAAN,AAAuB,AAACA,AAAAA,AAAAA,AAAiBE,AAAAA;;AAAzC;;AAEA,AAACC,AAAetD,AAAc0C;;AAE9B,AAACD,AAA6BxD,AAAQyD;;AAEtC,AAAIQ;AACF,AAASA,AAASG;;AAClB,AAAShF,AAAS4B,AAAW9B;;;AAC/B,AAAMiF;AAAN,AAAsB,AAACA,AAAAA,AAAAA,AAAgBC,AAAAA;;AAAvC;;AACF,AAAMJ;AAAN,AACE,AAAMA;;AADR;;;AAGJ,AAAA,AAAOM,AAAYC;AAAnB,AACE,AAAI,AAAA,AAACrE,AAAW,AAACsE,AAA0B,AAAWD;AACpDA;;AACA,AAAME,AAAE,AAAA,AAAgBC;AAAxB,AACE,AAAcH,AAASE;;;AAG7B,AAAA,AAAgBE,AAAgBC,AAAQL,AAASM,AAAoBC;AAArE,AACE,AAAM7F,AAAO,AAACqF,AAAWC;AACnBQ,AAAM,AAAe9F;AACrB+F,AAAO,AAAgB/F;AACvB8B,AAAc,AAACkE,AAAcL;AAC7BxF,AAAS,AAAK8F,AAAoB,AAAA,AAAA,AAACC,AAAiBlG;AACpDC,AAAO,AAAAkG,AAAA,AAAA,AAAA,AAA6B,AAAGL,AAAMC;AAC7ChE,AAAW,AAAKqE;AAChBlG,AAAM,AAAKmG;AAPjB,AAQI,AAAUlG,AAAS2F,AAAMC;;AACzB,AAAMhF,AAAQ,AAAArB,AAAA,AAAUoC,AACKC,AACAuD,AACAtF,AAAOC,AAAOC,AAAMC,AAASyF,AAAoBC;AAH9E,AAIE,AAAA,AAAM,AAAa9E;AAAnB,AAA6B,AAAC+D,AAAQ/D;;;AACtC,AAACc,AAAWd,AAAQe,AAAcC;;AAClC,AAAO1C,AAAS0B;;AAChBA;;AAER,AAAA,AAAOuF,AAAmCC;AAA1C,AACE,AAAiBA,AAAY5E;;AAE/B,AAAA,AAAA6E,AAAOI,AAAyB7F,AAAQ4E;AAAxC,AAAA,AAAAc,AAAAD;AAAAC,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAF,AAAA,AAAwDI;AAAxD,AAAAF,AAAAF,AAAA,AAAyEK;AAAzE,AACE,AAAM/E,AAAW,AAAiBhB;AAC5Be,AAAc,AAA8Bf;AAC5CgG,AAAkB,AAACf,AAAcL;AAFvC,AAGE,AAACW,AAAqB,AAAQxE;;AAC9B,AAACkF,AAAgBlF;;AACjB,AAACD,AAAWd,AAAQgG,AAAkBhF;;AACtC,AAAM,AAAgBhB,AAASgG;;AAC/B,AAAM,AAAkBhG,AAAS8F;;AACjC,AAAM,AAAiB9F,AAAS+F;;AAChC/F;;AAEJ,AAAA,AAAOkG,AAAc3B;AAArB,AACE,AAACzB,AAAM,AAAA,AAAAqD,AAACC;AAAD,AAAS,AAAClG,AAAE,AAAAiG,AAAc5B;AAAUjG;;AAE7C,AAAA,AAAA+H,AAAeE,AAAQ3B,AACKL;AAD5B,AAAA,AAAA+B,AAAAD;AAAAC,AAAA,AAAAX,AAAAW;AAAAA,AAE0EE;AAF1E,AAAAZ,AAAAU,AAAA,AAEoCR;AAFpC,AAAAF,AAAAU,AAAA,AAEqDP;AAFrD,AAGE,AAAAU,AAA0B,AAACP,AAAa3B;AAAxC,AAAA,AAAAkC;AAAA,AAAAA,AAASC;AAAT,AACE,AAACb,AAAea,AAAiB9B,AAAQ4B;;AACzC,AAAMxG,AAAQ,AAAC2E,AAAeC,AAAQL,AAASuB,AAAiBC;AAC1D3G,AAAS,AAAgBY;AAD/B,AAEE,AAAmBZ,AAAS,AAAaY;;AACzCA","names":["js/threeagent","js/threeagent.impl","js/threeagent.impl.scene","js/threeagent.impl.scene.contexts","threeagent.impl.scene/contexts","this__4404__auto__","writer__4405__auto__","opt__4406__auto__","cljs.core/-write","threeagent.impl.scene/Context","threeagent.impl.scene/->Context","virtualScene","sceneRoot","domRoot","animateFn","canvas","camera","clock","renderer","beforeRenderCb","afterRenderCb","threeagent.impl.scene/create-object","node-data","comp-config","obj","threeagent.impl.component/render-component","threeagent.impl.threejs/set-position!","threeagent.impl.threejs/set-rotation!","threeagent.impl.threejs/set-scale!","threeagent.impl.scene/set-node-object","context","node","cljs.core._EQ_","threeagent.impl.scene/add-node","parent-object","e26198","cljs.core.partial","temp__5735__auto__","callback","e","threeagent.impl.util/log","cljs.core.println","threeagent.impl.scene/remove-node!","parent-obj","threeagent.impl.scene/init-scene","virtual-scene","scene-root","threeagent.impl.scene/diff-data","o","n","this","cljs.core.not_EQ_","position","rotation","scale","threeagent.impl.scene/update-node!","old-data","new-data","diff","old-obj","metadata","e26199","vec__26200","cljs.core.nth","children","new-obj","seq__26203","cljs.core/seq","chunk__26204","count__26205","i__26206","cljs.core/chunked-seq?","c__4591__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","child","ex","p__26207","vec__26208","threeagent.impl.scene/apply-change!","action","old","new","threeagent.impl.scene/apply-virtual-scene-changes!","changelog","seq__26211","chunk__26212","count__26213","i__26214","change","threeagent.impl.scene/animate","stats","composer","before-render-cb","after-render-cb","delta-time","threeagent.impl.virtual-scene/render!","threeagent.impl.scene/get-canvas","dom-root","clojure.string/lower-case","c","js/document","threeagent.impl.scene/create-context","root-fn","on-before-render-cb","on-after-render-cb","width","height","threeagent.impl.virtual-scene/create","js/module$node_modules$three$build$three.WebGLRenderer","cljs.core/clj->js","js/module$node_modules$three$build$three.PerspectiveCamera","js/module$node_modules$three$build$three.Scene","js/module$node_modules$three$build$three.Clock","threeagent.impl.scene/remove-all-children!","vscene-root","p__26215","map__26216","cljs.core/--destructure-map","cljs.core.get","threeagent.impl.scene/reset-context!","on-before-render","on-after-render","new-virtual-scene","threeagent.impl.virtual-scene/destroy!","threeagent.impl.scene/find-context","p1__26217#","cljs.core.filter","p__26218","map__26219","threeagent.impl.scene/render","config","temp__5733__auto__","existing-context"],"sourcesContent":["(ns threeagent.impl.scene\n  (:require [threeagent.impl.virtual-scene :as vscene]\n            [threeagent.impl.util :refer [log]]\n            [threeagent.impl.threejs :as threejs]\n            [threeagent.impl.component :refer [render-component]]\n            [\"three\" :as three]\n            [cljs.core :refer [exists?]]))\n\n(defonce ^:private contexts (array))\n\n(deftype Context [^vscene/Scene virtualScene\n                       ^vscene/Node sceneRoot\n                       ^js domRoot\n                       ^js animateFn\n                       ^js canvas\n                       ^js camera\n                       ^js clock\n                       ^js renderer\n                       ^js beforeRenderCb\n                       ^js afterRenderCb]\n    Object)\n\n(defn- create-object [node-data]\n  (let [comp-config (:component-config node-data)\n        obj (render-component (:component-key node-data) comp-config)]\n    (threejs/set-position! obj (:position node-data))\n    (threejs/set-rotation! obj (:rotation node-data))\n    (threejs/set-scale! obj (:scale node-data))\n    obj))\n\n(defn- set-node-object [^Context context ^vscene/Node node node-data obj]\n  (set! (.-threejs node) obj)\n  (when (= :camera (:component-key node-data))\n    (set! (.-camera context) obj)))\n\n(defn- add-node [^Context context parent-object ^vscene/Node node]\n  (try\n    (let [node-data (.-data node)\n          comp-config (:component-config node-data)\n          obj (create-object node-data)]\n      (set-node-object context node node-data obj)\n      (.add parent-object obj)\n      (.for-each-child node (partial add-node context obj))\n      (.dispatchEvent obj #js {:type \"on-added\"})\n      (when-let [callback (:on-added (.-meta node))]\n        (callback obj))\n      obj)\n    (catch :default e\n      (log \"Failed to add node\")\n      (log e)\n      (println node))))\n\n(defn- remove-node! [^vscene/Node node]\n  (let [obj (.-threejs node)\n        parent-obj ^js (.-threejs (.-parent node))]\n    (.dispatchEvent obj #js {:type \"on-removed\"})\n    (when-let [callback (:on-removed (.-meta node))]\n      (callback obj))\n    (.remove parent-obj obj)\n    (.for-each-child node remove-node!)))\n\n(defn- init-scene [^Context context virtual-scene scene-root]\n  (add-node context scene-root (.-root virtual-scene)))\n\n(defn diff-data [o n]\n  (let [this (when (or (not= (:component-config o) (:component-config n))\n                       (not= (:component-key o) (:component-key n)))\n               [o n])\n        position (when (not= (:position o) (:position n)) (:position n))\n        rotation (when (not= (:rotation o) (:rotation n)) (:rotation n))\n        scale (when (not= (:scale o) (:scale n)) (:scale n))]\n    {:this this\n     :scale scale\n     :position position\n     :rotation rotation}))\n\n(defn- update-node! [^Context context node old-data new-data]\n  (let [diff (diff-data old-data new-data)\n        old-obj ^js (.-threejs node)\n        metadata (.-meta node)\n        this (:this diff)]\n    (if this\n      ;; Fully reconstruct scene object\n      (try\n        (let [[o n] this\n              parent-obj (.-parent old-obj)\n              children (.-children old-obj)\n              new-obj (create-object new-data)]\n          (.dispatchEvent old-obj #js {:type \"on-removed\"})\n          (when-let [callback (:on-removed metadata)]\n            (callback old-obj))\n          (set-node-object context node new-data new-obj)\n          (.remove parent-obj old-obj)\n          (.add parent-obj new-obj)\n          (when-not (.terminal? node)\n            (doseq [child children]\n              (.add new-obj child)))\n          (.dispatchEvent new-obj #js {:type \"on-added\"})\n          (when-let [callback (:on-added metadata)]\n            (callback new-obj)))\n        (catch :default ex\n          (log \"Failed to update node due to error\")\n          (log ex)\n          (log node)))\n      ;; Update transformations\n      (do\n        (when (:position diff) (threejs/set-position! old-obj (:position diff)))\n        (when (:rotation diff) (threejs/set-rotation! old-obj (:rotation diff)))\n        (when (:scale diff) (threejs/set-scale! old-obj (:scale diff)))))))\n\n(defn- apply-change! [^Context context [^vscene/Node node action old new]]\n  (cond\n    (= :add action)\n    (add-node context ^js (.-threejs (.-parent node)) node)\n\n    (= :remove action)\n    (remove-node! node)\n\n    (= :update action)\n    (update-node! context node old new)))\n\n(defn- apply-virtual-scene-changes! [^Context context changelog]\n  (doseq [change changelog]\n    (apply-change! context change)))\n\n(defn- animate [^Context context]\n  (let [stats (.-stats context)\n        clock (.-clock context)\n        virtual-scene ^vscene/Scene (.-virtualScene context)\n        renderer (.-renderer context)\n        composer (.-composer context)\n        camera (.-camera context)\n        scene-root (.-sceneRoot context)\n        before-render-cb (.-beforeRenderCb context)\n        after-render-cb (.-afterRenderCb context)]\n    ;(log camera)\n    (when stats\n      (.begin stats))\n    (let [delta-time (.getDelta clock)\n          changelog (array)]\n      ;; Invoke callbacks\n      (when before-render-cb (before-render-cb delta-time))\n      ;; Render virtual scene\n      (vscene/render! virtual-scene changelog)\n      ;; Apply virtual scene changes to ThreeJs scene\n      (apply-virtual-scene-changes! context changelog)\n      ;; Render ThreeJS Scene\n      (if composer\n        (.render composer delta-time)\n        (.render renderer scene-root camera))\n      (when after-render-cb (after-render-cb delta-time)))\n    (when stats\n      (.end stats))))\n\n(defn- get-canvas [dom-root]\n  (if (= \"canvas\" (clojure.string/lower-case (.-tagName dom-root)))\n    dom-root\n    (let [c (.createElement js/document \"canvas\")]\n      (.appendChild dom-root c))))\n\n\n(defn- ^Context create-context [root-fn dom-root on-before-render-cb on-after-render-cb]\n  (let [canvas (get-canvas dom-root)\n        width (.-offsetWidth canvas)\n        height (.-offsetHeight canvas)\n        virtual-scene (vscene/create root-fn)\n        renderer (new three/WebGLRenderer (clj->js {:canvas canvas}))\n        camera (three/PerspectiveCamera. 75 (/ width height) 0.1 1000)\n        scene-root (new three/Scene)\n        clock (new three/Clock)]\n      (.setSize renderer width height)\n      (let [context (Context. virtual-scene\n                                   scene-root\n                                   dom-root nil\n                                   canvas camera clock renderer on-before-render-cb on-after-render-cb)]\n        (set! (.-animateFn context) #(animate context))\n        (init-scene context virtual-scene scene-root)\n        (.push contexts context)\n        context)))\n\n(defn- remove-all-children! [^vscene/Node vscene-root]\n  (.for-each-child vscene-root remove-node!))\n\n(defn- reset-context! [^Context context root-fn {:keys [on-before-render on-after-render]}]\n  (let [scene-root ^js (.-sceneRoot context)\n        virtual-scene ^vscene/Scene (.-virtualScene context)\n        new-virtual-scene (vscene/create root-fn)]\n    (remove-all-children! (.-root virtual-scene))\n    (vscene/destroy! virtual-scene)\n    (init-scene context new-virtual-scene scene-root)\n    (set! (.-virtualScene context) new-virtual-scene)\n    (set! (.-beforeRenderCb context) on-before-render)\n    (set! (.-afterRenderCb context) on-after-render)\n    context))\n\n(defn- find-context [dom-root]\n  (first (filter #(= (.-domRoot %) dom-root) contexts)))\n\n(defn ^Context render [root-fn\n                            dom-root\n                            {:keys [on-before-render on-after-render] :as config}]\n  (if-let [existing-context (find-context dom-root)]\n    (reset-context! existing-context root-fn config)\n    (let [context (create-context root-fn dom-root on-before-render on-after-render)\n          renderer ^js (.-renderer context)]\n      (.setAnimationLoop renderer (.-animateFn context))\n      context)))\n"]}