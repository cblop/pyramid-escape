{"version":3,"sources":["threeagent/impl/virtual_scene.cljs"],"mappings":"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","names":["js/threeagent","js/threeagent.impl","js/threeagent.impl.virtual-scene","js/threeagent.impl.virtual-scene.non-component-keys","threeagent.impl.virtual-scene/non-component-keys","var_args","G__36382","threeagent.impl.virtual-scene/print-tree","js/Error","node","threeagent.impl.virtual_scene.print_tree","p","is-reactive","cljs.core.println","seq__36384","cljs.core/seq","chunk__36385","count__36386","i__36387","temp__5735__auto__","cljs.core/chunked-seq?","c__4591__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","child","cljs.core/es6-iterator-seq","G__36390","threeagent.impl.virtual-scene/node->path","threeagent.impl.virtual_scene.node__GT_path","path","cljs.core.conj","cljs.core/reverse","threeagent.impl.virtual-scene/get-key","key","meta","this__4404__auto__","writer__4405__auto__","opt__4406__auto__","cljs.core/-write","threeagent.impl.virtual-scene/Node","threeagent.impl.virtual-scene/->Node","parent","depth","data","dirty","render","reaction","children","this","cljs.core._EQ_","f","seq__36398","chunk__36399","count__36400","i__36401","threeagent.impl.virtual-scene/Scene","threeagent.impl.virtual-scene/->Scene","root","renderQueue","threeagent.impl.virtual-scene/get-in-node","cljs.core/empty?","cljs.core/rest","threeagent.impl.virtual-scene/get-in-scene","scene","threeagent.impl.virtual-scene/eval-fn","args","result","cljs.core.apply","cljs.core/fn?","threeagent.impl.virtual-scene/on-react!","ctx","threeagent.impl.virtual-scene/extract-comp-config","config","c","cljs.core/transient","cljs.core/persistent!","p1__36415#","p2__36416#","cljs.core.reduce","cljs.core.dissoc_BANG_","threeagent.impl.virtual-scene/node-data","comp-key","comp-config","js/threeagent.impl.virtual-scene.->node","method-table__4654__auto__","cljs.core.atom","prefer-table__4655__auto__","method-cache__4656__auto__","cached-hierarchy__4657__auto__","hierarchy__4658__auto__","cljs.core.get","fexpr__36417","cljs.core/MultiFn","cljs.core.symbol","threeagent.impl.virtual-scene/->node","p__36418","vec__36419","seq__36420","first__36421","l","r","cljs.core/Keyword","cljs.core/sequential?","form","cljs.core/with-meta","cljs.core.into","cljs.core/meta","vec__36422","seq__36423","first__36424","rs","first-child","metadata","or__4160__auto__","cljs.core/map?","cljs.core.filter","cljs.core/some?","children-map","js/Map","seq__36425","chunk__36426","count__36427","i__36428","vec__36435","cljs.core.nth","vec__36438","idx","medley.core.indexed","child-node","vec__36441","seq__36442","first__36443","vec__36444","reaction-ctx","cljs.core/clj->js","final-fn","reagent.ratom/run-in-reaction","p__36447","vec__36448","seq__36449","first__36450","threeagent.impl.virtual-scene/form->form-type","js/threeagent.impl.virtual-scene.->node-shallow","fexpr__36451","threeagent.impl.virtual-scene/->node-shallow","m","vec__36455","seq__36456","first__36457","p1__36452#","p1__36454#","p2__36453#","cljs.core.map_indexed","cljs.core/PersistentVector","threeagent.impl.virtual-scene/dispose-node!","reagent.ratom/dispose!","threeagent.impl.virtual-scene/add-node!","parent-node","changelog","threeagent.impl.virtual-scene/remove-node!","threeagent.impl.virtual-scene/replace-node!","new-form","new-node","threeagent.impl.virtual-scene/diff-fn?","original-fn","cljs.core.not_EQ_","threeagent.impl.virtual-scene/update-node!","render-fn","new-type","rendered-form","and__4149__auto__","old-form","old-data","shallow-node","new-data","current-keys","cljs.core/set","new-keys","cljs.core.map","dropped-keys","clojure.set.difference","seq__36458","chunk__36459","count__36460","i__36461","child-key","seq__36462","chunk__36463","count__36464","i__36465","vec__36472","vec__36475","child-form","temp__5733__auto__","threeagent.impl.virtual-scene/render-node!","threeagent.impl.virtual-scene/render!","reagent.core/flush","queue","threeagent.impl.virtual-scene/destroy!","threeagent.impl.virtual-scene/create","root-fn","js/goog.structs.PriorityQueue","root-node"],"sourcesContent":["(ns threeagent.impl.virtual-scene\n  (:require [threeagent.impl.util :refer [log]]\n            [medley.core :as medley]\n            [reagent.ratom :as ratom]\n            [reagent.core :as reagent])\n  (:import [goog.structs PriorityQueue]))\n\n(defonce ^:private non-component-keys #{:position :rotation :scale})\n\n(defn print-tree\n  ([^Node node]\n   (print-tree node \"\"))\n  ([^Node node p]\n   (let [is-reactive (some? (.-reaction node))]\n    (println p \"|-\"\n              (.-key node)\n              (str \"comp:\" (:component-key (.-data node)))\n              (str \"dirty:\" (.-dirty node))\n              (str \"reactive:\" is-reactive))\n    (doseq [child (es6-iterator-seq (.values (.-children node)))]\n      (print-tree child (str p \"\\t\"))))))\n\n(defn node->path\n  ([node]\n   (node->path [] node))\n  ([path node]\n   (if node\n     (recur (conj path (.-key node)) (.-parent node))\n     (reverse path))))\n\n(defn get-key [key meta] (:key meta key))\n      \n(deftype Node [^Node parent depth key meta data dirty render reaction children]\n  Object\n  (terminal? [this]\n    (= 0 (.-size children)))\n  (for-each-child [this f]\n    (doseq [child (es6-iterator-seq (.values children))]\n      (f child))))\n\n(deftype Scene [root renderQueue]\n  Object\n  (enqueueForRender [this ^Node node]\n    (set! (.-dirty node) true)\n    (.enqueue renderQueue (.-depth node) node)))\n\n(defn get-in-node [^Node node path]\n  (if (empty? path)\n    node\n    (recur (.get (.-children node) (first path)) (rest path))))\n\n(defn get-in-scene [^Scene scene path] (get-in-node (.-root scene) (rest path)))\n\n(defn- eval-fn [f args]\n  (let [result (apply f args)]\n    (if (fn? result)\n      (recur result args)\n      [f result])))\n\n(defn- on-react! [ctx]\n  (let [node ^Node (.-node ctx)\n        scene ^Scene (.-scene ctx)]\n    (.enqueueForRender scene node)))\n    \n(defn- extract-comp-config [config]\n  (let [c (transient config)]\n    (persistent! (reduce #(dissoc! %1 %2) c non-component-keys))))\n\n(defn- node-data [comp-key comp-config]\n  {:position (:position comp-config [0 0 0])\n   :rotation (:rotation comp-config [0 0 0])\n   :scale (:scale comp-config [1.0 1.0 1.0])\n   :component-key comp-key\n   :component-config (extract-comp-config comp-config)}) ;(apply dissoc comp-config non-component-keys)})\n\n(defmulti ->node (fn [^Scene scene ^Node parent key [l & r]]\n                   (cond\n                      (keyword? l) :keyword\n                      (fn? l) :fn\n                      (sequential? l) :seq\n                      (and (nil? l) (nil? r)) :empty-list\n                      :else nil)))\n\n(defmethod ->node :default [scene parent key form]\n  (println \"Invalid object form:\" form))\n\n(defmethod ->node :empty-list [scene parent key form])\n\n(defmethod ->node :seq [scene parent key form]\n  (->node scene parent key (with-meta (into [:object] form) (meta form))))\n\n(defmethod ->node :keyword [scene parent key form]\n  (let [[comp-key & rs] form\n        first-child (first rs)\n        metadata (meta form)\n        key (or (:key metadata) key)\n        comp-config (if (map? first-child) first-child {})\n        children (filter some? (if (map? first-child) (rest rs) rs))\n        children-map (js/Map.)\n        data (node-data comp-key comp-config)\n        depth (if parent\n                (inc (.-depth parent))\n                0)\n        node (Node. parent depth key metadata data false nil nil children-map)]\n    (doseq [[idx child] (medley/indexed children)]\n      (when-let [child-node (->node scene node idx child)]\n        (.set children-map (.-key child-node) child-node)))\n    node))\n\n(defmethod ->node :fn [scene parent key form]\n  (let [key (or (:key (meta form)) key)\n        [f & args] form\n        reaction-ctx ^js (clj->js {:node nil :reaction nil})\n        [final-fn result] (ratom/run-in-reaction #(eval-fn f args) reaction-ctx \"reaction\" on-react! {:no-cache true})\n        node ^Node (->node scene parent key result)]\n    (set! (.-originalFn node) f)\n    (set! (.-render node) final-fn)\n    (set! (.-form node) form)\n    (set! (.-renderedForm node) result)\n    (when-let [reaction (.-reaction reaction-ctx)]\n      (set! (.-scene reaction-ctx) scene)\n      (set! (.-node reaction-ctx) node)\n      (set! (.-reaction node) reaction))\n    node))\n\n(defn- form->form-type [[l & r]]\n  (cond\n    (fn? l) :fn\n    (keyword? l) :keyword\n    (sequential? l) :seq\n    (and (nil? l) (nil? r)) :empty-list\n    :else nil))\n\n(defmulti ->node-shallow (fn [key f] (form->form-type f)))\n\n(defmethod ->node-shallow :empty-list [key form])\n\n(defmethod ->node-shallow :fn [key form])\n\n(defmethod ->node-shallow :seq [key form]\n  (when-not (empty? form)\n    (let [m (meta form)]\n      (->node-shallow (get-key key m) (with-meta (into [:object] form) m)))))\n\n(defmethod ->node-shallow :keyword [key form]\n  (let [[comp-key & rs] form\n        first-child (first rs)\n        comp-config (if (map? first-child) first-child {})\n        children (filter #(and (some? %) (not (empty? %)))\n                         (if (map? first-child) (rest rs) rs))]\n    {:key key\n     :data (node-data comp-key comp-config)\n     :form form\n     :children-keys (map-indexed #(vector (or (:key (meta %2)) %1) %2)\n                                children)}))\n\n(defn- dispose-node! [^Node node]\n  (set! (.-disposed node) true)\n  (when-let [reaction (.-reaction node)]\n    (ratom/dispose! reaction))\n  (.for-each-child node dispose-node!))\n\n(defn- add-node! [^Scene scene ^Node parent-node key form changelog]\n  (when-let [node (->node scene parent-node key form)]\n    (.push changelog [node :add nil (.-data node)])\n    node))\n\n(defn- remove-node! [^Node node changelog]\n  (.push changelog [node :remove (.-data node) nil])\n  (set! (.-data node) nil)\n  (set! (.-dirty node) false)\n  (dispose-node! node))\n\n(defn- replace-node! [^Scene scene ^Node node new-form changelog]\n  (let [parent (.-parent node)\n        key (.-key node)]\n    (remove-node! node changelog)\n    (let [new-node (add-node! scene parent key new-form changelog)]\n      (.set (.-children parent) key new-node))))\n\n(defn- diff-fn? [^Node node new-form]\n  (let [original-fn (.-originalFn node)]\n    (and (some? original-fn)\n         (not= original-fn (first new-form)))))\n\n(defn- update-node! [^Scene scene ^Node node new-form changelog]\n  (set! (.-dirty node) false)\n  (if (diff-fn? node new-form)\n    (do\n      (replace-node! scene node new-form changelog))\n    (let [render-fn (.-render node)\n          original-fn (.-originalFn node)\n          new-type (form->form-type new-form)\n          rendered-form (if (and render-fn (= :fn new-type))\n                          (apply render-fn (rest new-form))\n                          new-form)\n          old-form (.-renderedForm node)]\n      (when (not= rendered-form old-form)\n        (let [key (.-key node)\n              children (.-children node)\n              old-data (.-data node)\n              shallow-node (->node-shallow key rendered-form)\n              new-data (:data shallow-node)\n              current-keys (set (es6-iterator-seq (.keys children)))\n              new-keys (set (map first (:children-keys shallow-node)))\n              dropped-keys (clojure.set/difference current-keys new-keys)]\n            (set! (.-data node) new-data)\n            (when render-fn\n              (set! (.-form node) (into [render-fn] (rest new-form))))\n            (set! (.-renderedForm node) new-form)\n            (.push changelog [node :update old-data new-data])\n            ;; Remove children that no longer exist\n            (doseq [child-key dropped-keys]\n              (let [child-node (.get children child-key)]\n                (remove-node! child-node changelog))\n              (.delete children child-key))\n            ;; Update existing children and add new children\n            (doseq [[child-key child-form] (:children-keys shallow-node)]\n              (if-let [child (.get children child-key)]\n                ;; Update existing child\n                (update-node! scene child child-form changelog)\n                ;; Add new child\n                (when-let [child-node (add-node! scene node child-key child-form changelog)]\n                  (.set children child-key child-node)))))))))\n\n(defn- render-node! [^Scene scene ^Node node changelog]\n  (let [form (.-form node)]\n    (update-node! scene node form changelog)))\n\n(defn render! [^Scene scene changelog]\n  (reagent/flush)\n  (let [queue (.-renderQueue scene)]\n    (loop [node ^Node (.dequeue queue)]\n      (when node\n        (do\n          (when (.-dirty node)\n            (render-node! scene node changelog))\n          (recur ^Node (.dequeue queue)))))))\n\n(defn destroy! [^Scene scene]\n  (dispose-node! (.-root scene)))\n\n(defn create [root-fn]\n  (let [scene (Scene. nil (PriorityQueue.))\n        root-node (->node scene nil 0 [root-fn])]\n    (set! (.-root scene) root-node)\n    scene))\n"]}